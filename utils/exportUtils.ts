import { MissionData, FlightPlan, Mission } from '@/types/mission'

export function generateKMLExport(flightPlan: FlightPlan, missionData: MissionData): string {
  const kmlHeader = `<?xml version="1.0" encoding="UTF-8"?>
<kml xmlns="http://www.opengis.net/kml/2.2">
  <Document>
    <name>Drone Flight Plan</name>
    <description>Generated by Droner Mission Planner</description>
    
    <!-- Area of Interest -->
    <Placemark>
      <name>Area of Interest</name>
      <description>Survey area boundary</description>
      <Style>
        <PolyStyle>
          <color>7f3b82f6</color>
          <outline>1</outline>
        </PolyStyle>
        <LineStyle>
          <color>ff1d4ed8</color>
          <width>2</width>
        </LineStyle>
      </Style>
      <Polygon>
        <outerBoundaryIs>
          <LinearRing>
            <coordinates>
              ${missionData.polygon.coordinates[0].map(coord => `${coord.lng},${coord.lat},0`).join('\n              ')}
            </coordinates>
          </LinearRing>
        </outerBoundaryIs>
      </Polygon>
    </Placemark>`

  const missionFolders = flightPlan.missions.map((mission, index) => {
    const missionColor = mission.color.replace('#', '')
    const kmlColor = `ff${missionColor.slice(4, 6)}${missionColor.slice(2, 4)}${missionColor.slice(0, 2)}` // Convert RGB to BGR and add alpha
    
    return `
    <!-- Mission ${index + 1} -->
    <Folder>
      <name>Mission ${index + 1} (${mission.estimatedTime.toFixed(1)} min, ${mission.estimatedPhotos} photos)</name>
      <description>Battery mission ${index + 1}</description>
      ${mission.flightLines.map((flightLine, lineIndex) => `
      <Placemark>
        <name>Flight Line ${lineIndex + 1}</name>
        <description>Heading: ${flightLine.heading.toFixed(0)}°, Length: ${flightLine.length.toFixed(1)}m</description>
        <Style>
          <LineStyle>
            <color>${kmlColor}</color>
            <width>3</width>
          </LineStyle>
        </Style>
        <LineString>
          <coordinates>
            ${flightLine.coordinates.map(coord => `${coord.lng},${coord.lat},${missionData.calculatedAltitude}`).join('\n            ')}
          </coordinates>
        </LineString>
      </Placemark>`).join('')}
    </Folder>`
  }).join('')

  const kmlFooter = `
  </Document>
</kml>`

  return kmlHeader + missionFolders + kmlFooter
}

export function generateCSVExport(flightPlan: FlightPlan, missionData: MissionData): string {
  const csvHeader = 'Mission,Line,Waypoint,Latitude,Longitude,Altitude,Heading,Notes\n'
  
  const csvRows: string[] = []
  
  flightPlan.missions.forEach((mission, missionIndex) => {
    mission.flightLines.forEach((flightLine, lineIndex) => {
      flightLine.coordinates.forEach((coord, waypointIndex) => {
        const row = [
          missionIndex + 1,
          lineIndex + 1,
          waypointIndex + 1,
          coord.lat.toFixed(6),
          coord.lng.toFixed(6),
          missionData.calculatedAltitude.toFixed(1),
          flightLine.heading.toFixed(1),
          `Mission ${missionIndex + 1}, Line ${lineIndex + 1}`
        ].join(',')
        
        csvRows.push(row)
      })
    })
  })
  
  return csvHeader + csvRows.join('\n')
}

export function generateFlightPlanSummary(flightPlan: FlightPlan, missionData: MissionData): string {
  const summary = `
DRONE MISSION PLAN SUMMARY
Generated by Droner Mission Planner

MISSION OVERVIEW:
- Total Area: ${(flightPlan.totalArea / 4046.86).toFixed(2)} acres
- Total Flight Time: ${flightPlan.totalTime.toFixed(1)} minutes
- Number of Batteries: ${flightPlan.batteryCount}
- Total Photos: ${flightPlan.totalPhotos}
- Optimal Flight Heading: ${flightPlan.optimalHeading.toFixed(0)}°

FLIGHT PARAMETERS:
- Ground Sample Distance: ${missionData.parameters.gsd} cm/px
- Flight Altitude: ${missionData.calculatedAltitude.toFixed(1)}m AGL
- Front Overlap: ${missionData.parameters.frontOverlap}%
- Side Overlap: ${missionData.parameters.sideOverlap}%
- Drone Speed: ${missionData.parameters.droneSpeed} m/s
- Max Battery Time: ${missionData.parameters.maxBatteryTime} minutes

MISSION BREAKDOWN:
${flightPlan.missions.map((mission, index) => `
Mission ${index + 1}:
- Estimated Time: ${mission.estimatedTime.toFixed(1)} minutes
- Estimated Photos: ${mission.estimatedPhotos}
- Flight Lines: ${mission.flightLines.length}
- Color: ${mission.color}`).join('\n')}

DRONE SPECIFICATIONS:
- Model: DJI Phantom 4 Pro
- Sensor: ${missionData.droneSpecs.sensor.width}×${missionData.droneSpecs.sensor.height}mm
- Focal Length: ${missionData.droneSpecs.focalLength}mm
- Image Resolution: ${missionData.droneSpecs.imageDimensions.width}×${missionData.droneSpecs.imageDimensions.height}px
- Minimum Photo Interval: ${missionData.droneSpecs.minPhotoInterval} seconds
- Usable Battery Time: ${missionData.droneSpecs.usableBatteryTime} minutes

NOTES:
- Flight plan assumes constant altitude (flat earth model)
- Turn time penalties are included in mission time calculations
- Each mission is optimized to fit within battery constraints
- Flight lines are generated with optimal spacing for coverage
`
  
  return summary.trim()
} 